#!/usr/bin/env python3

 
import argparse
import sys
from src.llm_client import GeminiClient
from src.spotify_client import SpotifyClient

def main():
    # Set up argument parsing
    parser = argparse.ArgumentParser(description="SpotiSmart: Smart Playlist Generator")
    parser.add_argument('command', choices=['create'], 
                       help='Command to execute: create')
    parser.add_argument('-t', '--title', type=str, required=True, help='Title of the playlist to create.')
    parser.add_argument('-p', '--prompt', type=str, required=True, help='The mood or theme for your playlist (e.g., "rainy day focus music").')
    parser.add_argument('-n', '--num_tracks', type=int, default=40, help='Number of your top tracks to use as inspiration.(max 100).')

    args = parser.parse_args()

    if args.command == 'create':
        # Initialize Clients
        spotify_client = SpotifyClient()
        gemini_client = GeminiClient()

        # Authenticate with Spotify
        print("Authenticating with Spotify...")
        sp = spotify_client.authenticate()
        if not sp:
            print("Could not authenticate with Spotify. Exiting.")
            sys.exit(1) # Exit if authentication fails

        # Get User's Top Tracks
        print(f"Fetching your top {args.num_tracks} tracks...")
        tracks = spotify_client.get_user_top_tracks(limit=args.num_tracks)
        if not tracks:
            print("Could not fetch your top tracks. Exiting.")
            sys.exit(1)

        # Get Song Recommendations from the LLM
        recommendations = gemini_client.generate_playlist_songs(args.prompt, tracks, args.num_tracks)
        if not recommendations:
            print("The LLM could not generate a song list from your tracks. Exiting.")
            sys.exit(1)

        print(f"\nLLM recommended songs for your playlist:")
        for name in recommendations:
            print(f"- {name}")

        # Find Track URIs for the Recommended Songs
        track_uris_to_add = []
        for item in recommendations:
            try:
                # Split "Song Name by Artist" into two parts
                song_name, artist_name = item.split(' by ', 1)
                track_uri = spotify_client.search_for_track(song_name.strip(), artist_name.strip())
                if track_uri:
                    track_uris_to_add.append(track_uri)
            except ValueError:
                print(f"Warning: Could not parse recommendation '{item}'. Skipping.")
                continue
        
        if not track_uris_to_add:
            print("Couldn't find any of the recommended songs on Spotify. Exiting.")
            sys.exit(1)

        # Create and populate the playlist
        playlist_name = f"{args.title}"
        playlist_id = spotify_client.create_playlist(playlist_name, f"{args.prompt} - Generated by SpotiSmart")
        
        if playlist_id:
            spotify_client.add_tracks_to_playlist(playlist_id, track_uris_to_add)
            print("\nâœ… Playlist created successfully on Spotify!")

if __name__ == "__main__":
    main()
