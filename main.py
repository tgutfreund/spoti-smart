#!/usr/bin/env python3

 
import argparse
import sys
from llm_client import GeminiClient
from src.spotify_client import SpotifyClient

def main():
    # Set up argument parsing
    parser = argparse.ArgumentParser(description="SpotiSmart: Smart Playlist Generator")
    parser.add_argument('command', choices=['login', 'test', 'create'], 
                       help='Command to execute: login, test, or create')
    parser.add_argument('-p', '--prompt', type=str, required=True, help='The mood or theme for your playlist (e.g., "rainy day focus music").')
    parser.add_argument('-n', '--num_tracks', type=int, default=75, help='Number of your top tracks to consider (max 100).')

    args = parser.parse_args()

    # Initialize Spotify client
    client = SpotifyClient()
    
    if args.command == 'login':
        sp = client.authenticate()
        if sp:
            print("‚úÖ Login successful!")
        else:
            print("‚ùå Login failed.")
            sys.exit(1)

    elif args.command == 'create':
        # 1. Initialize Clients
        spotify_client = SpotifyClient()
        gemini_client = GeminiClient()

        # 2. Authenticate with Spotify
        print("Authenticating with Spotify...")
        sp = spotify_client.authenticate()
        if not sp:
            print("Could not authenticate with Spotify. Exiting.")
            sys.exit(1) # Exit if authentication fails

        # 3. Get User's Top Tracks
        print(f"Fetching your top {args.num_tracks} tracks...")
        tracks = spotify_client.get_user_top_tracks(limit=args.num_tracks)
        if not tracks:
            print("Could not fetch your top tracks. Exiting.")
            sys.exit(1)

        # 4. Get Song Recommendations from the LLM
        song_names_to_add = gemini_client.generate_playlist_songs(args.prompt, tracks)
        if not song_names_to_add:
            print("The LLM could not generate a song list from your tracks. Exiting.")
            sys.exit(1)

        print(f"\nLLM recommended songs for your playlist:")
        for name in song_names_to_add:
            print(f"- {name}")

        # 5. Find Track URIs for the Recommended Songs
        track_uris_to_add = []
        for track in tracks:
            if track['name'] in song_names_to_add:
                track_uris_to_add.append(track['uri'])
        
        if not track_uris_to_add:
            print("Couldn't find any of the recommended songs in your library. Exiting.")
            sys.exit(1)

        # 6. Create and Populate the Spotify Playlist
        playlist_name = f"SpotiSmart: {args.prompt}"
        playlist_id = spotify_client.create_playlist(playlist_name, "Generated by SpotiSmart with Google Gemini.")
        
        if playlist_id:
            spotify_client.add_tracks_to_playlist(playlist_id, track_uris_to_add)
            print("\n‚úÖ Playlist created successfully on Spotify!")

    elif args.command == 'test':
        sp = client.authenticate()
        if sp:
            print("‚úÖ Authentication successful!")
            tracks = client.get_user_top_tracks(limit=10)
            if tracks:
                print(f"\nüéµ Your top tracks:")
                for i, track in enumerate(tracks, 1):
                    artists = ', '.join([artist['name'] for artist in track['artists']])
                    print(f"{i}. {track['name']} by {artists}")
            else:
                print("‚ùå Failed to fetch top tracks.")
        else:
            print("‚ùå Authentication failed.")
            sys.exit(1)

if __name__ == "__main__":
    main()
